AWSTemplateFormatVersion: '2010-09-09'
Description: "Deploy an EC2 instance with Lambda triggered by CloudWatch alarm for IAM role creation."

Parameters:
  AMIId:
    Type: String
    Default: ami-02db68a01488594c5
    Description: "AMI ID for the EC2 instance"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all inbound traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMIId
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: "cloud-recon-ec2"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd php
          systemctl start httpd
          systemctl enable httpd
          echo "<?php phpinfo(); ?>" > /var/www/html/index.php

  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudwatch.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudWatchIAMPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"

  MitigationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "IAMRoleCreationAlarm"
      AlarmDescription: "Triggers Lambda when a new IAM role is created"
      MetricName: "RoleCreationEvent"
      Namespace: "AWS/IAM"
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !GetAtt LambdaFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaS3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:CreateBucket"
                  - "s3:PutObject"
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "CreateCloudReconBucket"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = "cloud-recon-passed"
              s3.create_bucket(Bucket=bucket_name)
              s3.put_object(Bucket=bucket_name, Key='flag.txt', Body='flag{c!ou3-rec0n-leve!-c!eared}')
              return {
                  'statusCode': 200,
                  'body': json.dumps('Bucket created and flag added!')
              }
      Runtime: python3.8
      Timeout: 30

Outputs:
  InstanceURL:
    Description: "URL of the vulnerable EC2 instance"
    Value: !Sub "http://${EC2Instance.PublicIp}"

